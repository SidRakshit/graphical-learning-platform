# backend/models.py
from pydantic import BaseModel, Field
from typing import Optional, Dict, List, Any
import uuid
from datetime import datetime


# --- InteractionNode Models ---
class InteractionNodeBase(BaseModel):
    user_prompt: str = Field(
        ...,
        min_length=1,
        max_length=5000,
        description="The prompt or query from the user.",
    )
    summary_title: Optional[str] = Field(
        None,
        max_length=200,
        description="A brief, user-editable or LLM-generated title for this interaction node.",
    )


class Message(BaseModel):
    role: str = Field(
        ...,
        description="The role of the message sender (e.g., 'user', 'assistant', 'system').",
    )
    content: str = Field(..., description="The content of the message.")


# Payload for creating any new interaction node (root or branch)
# User ID will be injected by the endpoint from authenticated user context
class InteractionNodeCreate(BaseModel):
    user_prompt: str = Field(..., min_length=1, max_length=5000)
    summary_title: Optional[str] = Field(None, max_length=200)
    context_messages: Optional[List[Message]] = Field(
        None,
        description="A list of previous messages to provide context to the LLM for generation. Typically includes alternating user/assistant messages.",
    )


# Payload for creating a new ROOT interaction node.
# user_id will come from the auth dependency.
class RootInteractionNodeCreate(BaseModel):
    user_prompt: str = Field(
        ...,
        min_length=1,
        max_length=5000,
        description="The initial prompt or question from the user.",
    )
    summary_title: Optional[str] = Field(
        None,
        max_length=200,
        description="An optional initial title for this learning path/interaction.",
    )


class InteractionNode(InteractionNodeBase):
    node_id: str = Field(
        default_factory=lambda: str(uuid.uuid4()),
        description="Unique identifier for the interaction node.",
    )
    llm_response: str = Field(description="The response generated by the LLM.")
    timestamp: datetime = Field(
        default_factory=datetime.utcnow,
        description="Timestamp of when the interaction node was created.",
    )
    is_starting_node: bool = Field(
        description="True if this is the root of a new exploration/thought-tree."
    )
    user_id: str = Field(
        description="The ID of the user who initiated this interaction."
    )
    context_messages: Optional[List[Message]] = Field(
        None, description="The history of messages leading up to this node's creation."
    )

    model_config = {"from_attributes": True}


class InteractionNodeUpdate(BaseModel):
    user_prompt: Optional[str] = Field(None, min_length=1, max_length=5000)
    llm_response: Optional[str] = Field(
        None,
        description="Potentially allow re-generation or manual edit of LLM response.",
    )
    summary_title: Optional[str] = Field(None, max_length=200)
    context_messages: Optional[List[Message]] = Field(
        None, description="The history of messages leading up to this node's creation."
    )


# --- NEW: Models for Graph Data ---
class RelationshipData(BaseModel):
    source: str = Field(description="Node ID of the source node of the relationship.")
    target: str = Field(description="Node ID of the target node of the relationship.")
    type: str = Field(description="Type of the relationship (e.g., 'BRANCHED_TO').")
    properties: Dict[str, Any] = Field(
        description="Properties of the relationship (e.g., timestamp)."
    )

    model_config = {"from_attributes": True}


class GraphData(BaseModel):
    nodes: List[InteractionNode] = Field(description="List of nodes in the graph.")
    relationships: List[RelationshipData] = Field(
        description="List of relationships in the graph."
    )

    model_config = {"from_attributes": True}
